{
  "compilerOptions": {
    "module": "CommonJS", /* Specify what module code is generated. */
    "moduleDetection": "auto", /* Control what method is used to detect module-format JS files. */
    "target": "ES2022", /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "moduleResolution": "Node", /* Specify how TypeScript looks up a file from a given module specifier. */
    "incremental": false, /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    "lib": [
      "DOM",
      "ES2022"
    ], /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    "rootDir": "./src", /* Specify the root folder within your source files. */
    "baseUrl": ".", /* Specify the base directory to resolve non-relative module names. */
    "paths": {}, /* Specify a set of entries that re-map imports to additional lookup locations. */
    "rootDirs": ["./dist"], /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [], /* Specify multiple folders that act like './node_modules/@types'. */
    "types": [
      "node",
      "express"
    ], /* Specify type package names to be included without being referenced in a source file. */
    "resolveJsonModule": true, /* Enable importing .json files. */
    "allowArbitraryExtensions": true, /* Enable importing files with any extension, provided a declaration file is present. */
    "allowJs": true, /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    "checkJs": true, /* Enable error reporting in type-checked JavaScript files. */
    "declaration": false, /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    "declarationMap": false, /* Create sourcemaps for d.ts files. */
    "emitDeclarationOnly": false, /* Only output d.ts files and not JavaScript files. */
    "sourceMap": true, /* Create source map files for emitted JavaScript files. */
    "inlineSourceMap": false, /* Include sourcemap files inside the emitted JavaScript. */
    "outDir": "dist", /* Specify an output folder for all emitted files. */
    "removeComments": true, /* Disable emitting comments. */
    "noEmit": false, /* Disable emitting files from a compilation. */
    "importHelpers": false, /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    "newLine": "crlf", /* Set the newline character for emitting files. */
    "isolatedModules": false, /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true, /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    "allowSyntheticDefaultImports": true, /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true, /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true, /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true, /* Ensure that casing is correct in imports. */
    "strict": true, /* Enable all strict type-checking options. */
    "noImplicitAny": true, /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    "strictNullChecks": true, /* When type checking, take into account 'null' and 'undefined'. */
    "strictFunctionTypes": true, /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    "strictBindCallApply": true, /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    "strictPropertyInitialization": true, /* Check for class properties that are declared but not set in the constructor. */
    "noImplicitThis": true, /* Enable error reporting when 'this' is given the type 'any'. */
    "useUnknownInCatchVariables": true, /* Default catch clause variables as 'unknown' instead of 'any'. */
    "alwaysStrict": true, /* Ensure 'use strict' is always emitted. */
    "noUnusedLocals": true, /* Enable error reporting when local variables aren't read. */
    "noUnusedParameters": true, /* Raise an error when a function parameter isn't read. */
    "exactOptionalPropertyTypes": true, /* Interpret optional property types as written, rather than adding 'undefined'. */
    "noImplicitReturns": true, /* Enable error reporting for codepaths that do not explicitly return in a function. */
    "noFallthroughCasesInSwitch": true, /* Enable error reporting for fallthrough cases in switch statements. */
    "noUncheckedIndexedAccess": true, /* Add 'undefined' to a type when accessed using an index. */
    "noImplicitOverride": true, /* Ensure overriding members in derived classes are marked with an override modifier. */
    "noPropertyAccessFromIndexSignature": true, /* Enforces using indexed accessors for keys declared using an indexed type. */
    "allowUnusedLabels": false, /* Disable error reporting for unused labels. */
    "allowUnreachableCode": false, /* Disable error reporting for unreachable code. */
    "skipDefaultLibCheck": true, /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.js"
  ],
  "exclude": [
    "node_modules"
  ]
}
